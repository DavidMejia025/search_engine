Docker:
  Contenization creates a envelop to run an application under certain specifications and resources.

  Docker is the most popular contanization solution. Containerzation referes to the ability to wrap all the elements
  of an application into one single packadge (container) that can be shipped for deployment in any different machine.

  This idea comes from the transportation delivery system where in the begning was very dificult to decide how to ship
  any goods depending on the transportation system. Later the container appear and allow different objects to be sipped in the
  same transportation system.

  This analogy can be translated into software where an app has different components that needs to be shipped or runned in different
  machines (software), so a condainer ensures that all elements can be deployed in any system.

  Image

  Container

  DockerFile

  Docker compose

  Define a container with Dockerfile
Dockerfile defines what goes on in the environment inside your container. Access to resources like networking interfaces and disk drives is virtualized inside this environment, which is isolated from the rest of your system, so you need to map ports to the outside world, and be specific about what files you want to “copy in” to that environment. However, after doing that, you can expect that the build of your app defined in this Dockerfile behaves exactly the same wherever it runs.

  On instalation potentially issues:
   Troubleshooting for Linux users

Proxy server settings

Proxy servers can block connections to your web app once it’s up and running. If you are behind a proxy server, add the following lines before RUN pip in your Dockerfile, using the ENV command to specify the host and port for your proxy servers:

# Set proxy server, replace host:port with values for your servers
ENV http_proxy host:port
ENV https_proxy host:port

  Docker compose
    Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application's services. Then, using a single command, you create and start all the services from your configuration.

    Using Compose is basically a three-step process.

1. Define your app's environment with a Dockerfile so it can be reproduced anywhere.
2. Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.
3. Lastly, run docker-compose up and Compose will start and run your entire app.

   docker compose https://www.youtube.com/watch?v=HUpIoF_conA


  Network basics types:
    https://docs.docker.com/network/

  Interesting source of docker tips worth to take a close look:
    https://nickjanetakis.com/blog/docker-tip-45-docker-compose-stop-vs-down
